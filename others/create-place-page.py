import requests
import pandas as pd

# ‚úÖ 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡∏Ç‡∏≠‡∏á Wiki.js
WIKI_API_URL = "http://localhost:3000/graphql"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏Ç‡∏≠‡∏á Wiki.js
API_KEY = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGkiOjEsImdycCI6MSwiaWF0IjoxNzM4MDQwMzI2LCJleHAiOjE3Njk1OTc5MjYsImF1ZCI6InVybjp3aWtpLmpzIiwiaXNzIjoidXJuOndpa2kuanMifQ.DargU97ydEqAM27mn78qXvOffPtQsqTLGEJ3kc7fMhA3JC6vfbFQB34A8O9q9dPWb4oFkyyknsp0BREF7elR6MzdqvH8z6zE99XH-ALhKQO9ucqn4Vs19vhGeEsatdVheMlEFgstxKdpgxVUs06xfG3oYukHb913MhMUqKgye_3Zu1xZzaPDJxndngF1keTEMq7p0h-3ORatVogHhyXE_KdcyDmRj1Psqq9OF08TpCq2sgVPccffM6ah3L2VMoTNL5pWDn78ea4bnOHf9X9DkTo2_cc4KMQUcX_JfowoBygkOEs2PRPiD9SaNmAZ1mAUsvVpL0apEKoWQqmWJAj6VQ"  # üî• ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

# ‚úÖ 2. ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV
provinces = pd.read_csv("./thai_provinces.csv")
amphures = pd.read_csv("./thai_amphures.csv")
tambons = pd.read_csv("./thai_tambons.csv")

# ‚úÖ 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GraphQL API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Wiki.js
def create_wiki_page(path, title, content=""):
    query = """
    mutation {
      pages {
        create(
          content: "%s"
          description: "‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
          editor: "wysiwyg"
          isPublished: true
          isPrivate: false
          locale: "th"
          path: "%s"
          tags: ["‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", "‡∏ï‡∏≥‡∏ö‡∏•"]
          title: "%s"
        ) {
          page {
            id
            path
            title
          }
          responseResult {
            succeeded
            message
          }
        }
      }
    }
    """ % (content, path, title)

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }

    response = requests.post(WIKI_API_URL, json={"query": query}, headers=headers)
    result = response.json()

    if result.get("data", {}).get("pages", {}).get("create", {}).get("responseResult", {}).get("succeeded"):
        print(f"‚úÖ Created: {path}")
    else:
        print(f"‚ùå Failed: {path}, Error: {result}")

# ‚úÖ 4. Loop ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Wiki.js ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ï‡∏≥‡∏ö‡∏•
# for _, tambon in tambons.iterrows():
#     amphure = amphures[amphures['id'] == tambon['amphure_id']].iloc[0]
#     province = provinces[provinces['id'] == amphure['province_id']].iloc[0]

#     path = f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/{province['name_th']}/{amphure['name_th']}/{tambon['name_th']}"
#     title = f"‡∏ï‡∏≥‡∏ö‡∏•{tambon['name_th']}"

#     print(path, ":", title)
#     # create_wiki_page(path, title)

for _, tambon in tambons.iterrows():
    amphure_match = amphures[amphures['id'] == tambon['amphure_id']]

    if amphure_match.empty:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {tambon['name_th']} (amphure_id: {tambon['amphure_id']})")
        continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ï‡∏≥‡∏ö‡∏•‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

    amphure = amphure_match.iloc[0]
    province_match = provinces[provinces['id'] == amphure['province_id']]

    if province_match.empty:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {amphure['name_th']} (province_id: {amphure['province_id']})")
        continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ï‡∏≥‡∏ö‡∏•‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

    province = province_match.iloc[0]

    path = f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà/{province['name_th']}/{amphure['name_th']}/{tambon['name_th']}"
    title = f"‡∏ï‡∏≥‡∏ö‡∏•{tambon['name_th']}"

    print(path, ":", title)

    # create_wiki_page(path, title)
